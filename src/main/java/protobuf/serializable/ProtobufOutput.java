/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package protobuf.serializable;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.Map;

import protobuf.serializable.annotation.TagValue;

public class ProtobufOutput implements AutoCloseable {
    DataOutputStream outputStream;

    public ProtobufOutput(OutputStream outputStream) {
        this.outputStream = new DataOutputStream(outputStream);
    }

    static Charset utf8 = Charset.forName("utf-8");

    public ProtobufOutput write(Object obj) throws IOException {
        TagValue annotation = obj.getClass().getAnnotation(TagValue.class);
        if (annotation == null)
            throw new RuntimeException("No tag");
        int tag = annotation.value();
        write(tag, obj);
        return this;
    }

    public ProtobufOutput writeUnsigned(int tag, Number value) throws IOException {
        writeTag(0, tag);
        writeVarint(value.longValue());
        return this;
    }

    public ProtobufOutput write(int tag, Object obj) {
        try {
            if (obj == null)
                return this;

            if (obj instanceof byte[]) {
                byte[] v = (byte[]) obj;
                writeTag(2, tag);
                writeVarint(v.length);
                outputStream.write(v);
            } else if (obj.getClass().isArray()) {
                int length = Array.getLength(obj);
                for (int i = 0; i < length; i++) {
                    write(tag, Array.get(obj, i));
                }
            } else if (obj instanceof Boolean) {
                writeTag(0, tag);
                Boolean v = (Boolean) obj;
                outputStream.writeByte(v ? 1 : 0);
            } else if (obj instanceof Double) {
                writeTag(1, tag); // 64-bit
                Double v = (Double) obj;
                outputStream.writeDouble(v);
            } else if (obj instanceof Float) {
                writeTag(5, tag); // 32-bit
                Float v = (Float) obj;
                outputStream.writeFloat(v);
            } else if (obj instanceof Number) {
                writeTag(0, tag); // Varint
                Number v = (Number) obj;
                writeVarint(zigzag(v.longValue()));
            } else if (obj instanceof String) {
                writeTag(2, tag);
                String v = (String) obj;
                byte[] bytes = v.getBytes(utf8);
                writeVarint(bytes.length);
                outputStream.write(bytes);
            } else if (obj instanceof Iterable) {
                Iterator<?> x = ((Iterable<?>) obj).iterator();
                while (x.hasNext()) {
                    write(tag, x.next());
                }
            } else if (obj instanceof Map) {
                for (Map.Entry<?, ?> entry : ((Map<?, ?>) obj).entrySet()) {
                    writeTag(2, tag); // MapFieldEntry
                    try {
                        long kSz = sizeOf(1, entry.getKey());
                        long vSz = sizeOf(2, entry.getValue());
                        writeVarint(kSz + vSz);
                    } catch (IllegalArgumentException | IllegalAccessException e) {
                        continue;
                    }
                    write(1, entry.getKey());
                    write(2, entry.getValue());
                }
            } else { //
                writeTag(2, tag);
                writeVarint(sizeOf(tag, obj));
                int tg = 0;
                Class<?> clz = obj.getClass();
                for (Field field : clz.getDeclaredFields()) {
                    TagValue annotation = field.getAnnotation(TagValue.class);
                    if (annotation != null)
                        tg = annotation.value();
                    else
                        tg++;
                    write(tg, field.get(obj));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return this;
    }

    private long sizeOfNumber(long v) {
        long sz = 1;
        while (v > 0x80) {
            v = v >>> 7;
            sz++;
        }
        return sz;
    }

    private long sizeOf(int tag, Object v) throws IllegalArgumentException, IllegalAccessException {
        if (v == null)
            return 0;
        long tagSz = sizeOfNumber(tag << 3);
        if (v instanceof Double) {
            return tagSz + 8;
        } else if (v instanceof Float) {
            return tagSz + 4;
        } else if (v instanceof String) {
            String s = (String) v;
            byte[] bytes = s.getBytes(utf8);
            return tagSz + sizeOfNumber(bytes.length) + bytes.length;
        } else if (v instanceof Number) {
            Number x = (Number) v;
            return tagSz + sizeOfNumber(x.longValue());
        } else if (v instanceof Iterable) {
            Iterator<?> x = ((Iterable<?>) v).iterator();
            long sz = 0;
            while (x.hasNext()) {
                sz += sizeOf(tag, x.next());
            }
            return tagSz + sizeOfNumber(sz) + sz;
        } else if (v instanceof Map) {
            long sz = 0;
            for (Map.Entry<?, ?> entry : ((Map<?, ?>) v).entrySet()) {
                sz += sizeOfNumber(tag << 3);
                long kSz = sizeOf(1, entry.getKey());
                long vSz = sizeOf(2, entry.getValue());
                sz += sizeOfNumber(kSz + vSz);
                sz += sizeOf(1, entry.getKey());
                sz += sizeOf(2, entry.getValue());
            }
            return tagSz + sizeOfNumber(sz) + sz;
        } else { // Object
            long sz = 0;
            Class<?> clz = v.getClass();
            Field[] declaredFields = clz.getDeclaredFields();
            int tg = 0;
            for (Field field : declaredFields) {
                TagValue annotation = field.getAnnotation(TagValue.class);
                if (annotation != null)
                    tg = annotation.value();
                else
                    tg++;
                sz += sizeOf(tg, field.get(v));
            }
            return tagSz + sizeOfNumber(sz) + sz;
        }
    }

    public void flush() throws IOException {
        outputStream.flush();
    }

    @Override
    public void close() throws IOException {
        outputStream.flush();
    }

    private void writeTag(int wireType, Integer tag) throws IOException {
        if (tag == null)
            throw new RuntimeException("No tag");
        writeVarint((tag << 3) | (wireType & 0x7));
    }

    private static long zigzag(long value) {
        return value >= 0 ? value << 1 : ((-value) << 1) | 1;
    }

    private void writeVarint(long value) throws IOException {
        long v = value >>> 7;
        if (v == 0) {
            outputStream.write((int) (value & 0x7F));
            return;
        } else {
            outputStream.write((int) (value & 0x7F | 0x80));
        }
        while (true) {
            int x = (int) (v & 0x7F);
            v = v >>> 7;
            if (v == 0) {
                outputStream.write(x);
                break;
            }
            outputStream.write(x | 0x80);
        }
    }
}
